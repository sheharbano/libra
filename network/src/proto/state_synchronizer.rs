// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `state_synchronizer.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default)]
pub struct GetChunkRequest {
    // message fields
    pub known_version: u64,
    pub limit: u64,
    pub timeout: u64,
    pub ledger_info_with_sigs: ::protobuf::SingularPtrField<super::ledger_info::LedgerInfoWithSignatures>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetChunkRequest {
    fn default() -> &'a GetChunkRequest {
        <GetChunkRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetChunkRequest {
    pub fn new() -> GetChunkRequest {
        ::std::default::Default::default()
    }

    // uint64 known_version = 1;


    pub fn get_known_version(&self) -> u64 {
        self.known_version
    }
    pub fn clear_known_version(&mut self) {
        self.known_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_known_version(&mut self, v: u64) {
        self.known_version = v;
    }

    // uint64 limit = 2;


    pub fn get_limit(&self) -> u64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = v;
    }

    // uint64 timeout = 3;


    pub fn get_timeout(&self) -> u64 {
        self.timeout
    }
    pub fn clear_timeout(&mut self) {
        self.timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: u64) {
        self.timeout = v;
    }

    // .types.LedgerInfoWithSignatures ledger_info_with_sigs = 4;


    pub fn get_ledger_info_with_sigs(&self) -> &super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.as_ref().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::default_instance())
    }
    pub fn clear_ledger_info_with_sigs(&mut self) {
        self.ledger_info_with_sigs.clear();
    }

    pub fn has_ledger_info_with_sigs(&self) -> bool {
        self.ledger_info_with_sigs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_with_sigs(&mut self, v: super::ledger_info::LedgerInfoWithSignatures) {
        self.ledger_info_with_sigs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_with_sigs(&mut self) -> &mut super::ledger_info::LedgerInfoWithSignatures {
        if self.ledger_info_with_sigs.is_none() {
            self.ledger_info_with_sigs.set_default();
        }
        self.ledger_info_with_sigs.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_with_sigs(&mut self) -> super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.take().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::new())
    }
}

impl ::protobuf::Message for GetChunkRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info_with_sigs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.known_version = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_with_sigs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.known_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.known_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.known_version != 0 {
            os.write_uint64(1, self.known_version)?;
        }
        if self.limit != 0 {
            os.write_uint64(2, self.limit)?;
        }
        if self.timeout != 0 {
            os.write_uint64(3, self.timeout)?;
        }
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetChunkRequest {
        GetChunkRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "known_version",
                    |m: &GetChunkRequest| { &m.known_version },
                    |m: &mut GetChunkRequest| { &mut m.known_version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "limit",
                    |m: &GetChunkRequest| { &m.limit },
                    |m: &mut GetChunkRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timeout",
                    |m: &GetChunkRequest| { &m.timeout },
                    |m: &mut GetChunkRequest| { &mut m.timeout },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ledger_info::LedgerInfoWithSignatures>>(
                    "ledger_info_with_sigs",
                    |m: &GetChunkRequest| { &m.ledger_info_with_sigs },
                    |m: &mut GetChunkRequest| { &mut m.ledger_info_with_sigs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetChunkRequest>(
                    "GetChunkRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetChunkRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetChunkRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetChunkRequest,
        };
        unsafe {
            instance.get(GetChunkRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetChunkRequest {
    fn clear(&mut self) {
        self.known_version = 0;
        self.limit = 0;
        self.timeout = 0;
        self.ledger_info_with_sigs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetChunkRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetChunkRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetChunkResponse {
    // message fields
    pub ledger_info_with_sigs: ::protobuf::SingularPtrField<super::ledger_info::LedgerInfoWithSignatures>,
    pub txn_list_with_proof: ::protobuf::SingularPtrField<super::transaction::TransactionListWithProof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetChunkResponse {
    fn default() -> &'a GetChunkResponse {
        <GetChunkResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetChunkResponse {
    pub fn new() -> GetChunkResponse {
        ::std::default::Default::default()
    }

    // .types.LedgerInfoWithSignatures ledger_info_with_sigs = 1;


    pub fn get_ledger_info_with_sigs(&self) -> &super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.as_ref().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::default_instance())
    }
    pub fn clear_ledger_info_with_sigs(&mut self) {
        self.ledger_info_with_sigs.clear();
    }

    pub fn has_ledger_info_with_sigs(&self) -> bool {
        self.ledger_info_with_sigs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ledger_info_with_sigs(&mut self, v: super::ledger_info::LedgerInfoWithSignatures) {
        self.ledger_info_with_sigs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ledger_info_with_sigs(&mut self) -> &mut super::ledger_info::LedgerInfoWithSignatures {
        if self.ledger_info_with_sigs.is_none() {
            self.ledger_info_with_sigs.set_default();
        }
        self.ledger_info_with_sigs.as_mut().unwrap()
    }

    // Take field
    pub fn take_ledger_info_with_sigs(&mut self) -> super::ledger_info::LedgerInfoWithSignatures {
        self.ledger_info_with_sigs.take().unwrap_or_else(|| super::ledger_info::LedgerInfoWithSignatures::new())
    }

    // .types.TransactionListWithProof txn_list_with_proof = 2;


    pub fn get_txn_list_with_proof(&self) -> &super::transaction::TransactionListWithProof {
        self.txn_list_with_proof.as_ref().unwrap_or_else(|| super::transaction::TransactionListWithProof::default_instance())
    }
    pub fn clear_txn_list_with_proof(&mut self) {
        self.txn_list_with_proof.clear();
    }

    pub fn has_txn_list_with_proof(&self) -> bool {
        self.txn_list_with_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_txn_list_with_proof(&mut self, v: super::transaction::TransactionListWithProof) {
        self.txn_list_with_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn_list_with_proof(&mut self) -> &mut super::transaction::TransactionListWithProof {
        if self.txn_list_with_proof.is_none() {
            self.txn_list_with_proof.set_default();
        }
        self.txn_list_with_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_txn_list_with_proof(&mut self) -> super::transaction::TransactionListWithProof {
        self.txn_list_with_proof.take().unwrap_or_else(|| super::transaction::TransactionListWithProof::new())
    }
}

impl ::protobuf::Message for GetChunkResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.ledger_info_with_sigs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.txn_list_with_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ledger_info_with_sigs)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.txn_list_with_proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.txn_list_with_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ledger_info_with_sigs.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.txn_list_with_proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetChunkResponse {
        GetChunkResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ledger_info::LedgerInfoWithSignatures>>(
                    "ledger_info_with_sigs",
                    |m: &GetChunkResponse| { &m.ledger_info_with_sigs },
                    |m: &mut GetChunkResponse| { &mut m.ledger_info_with_sigs },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::TransactionListWithProof>>(
                    "txn_list_with_proof",
                    |m: &GetChunkResponse| { &m.txn_list_with_proof },
                    |m: &mut GetChunkResponse| { &mut m.txn_list_with_proof },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetChunkResponse>(
                    "GetChunkResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetChunkResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetChunkResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetChunkResponse,
        };
        unsafe {
            instance.get(GetChunkResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetChunkResponse {
    fn clear(&mut self) {
        self.ledger_info_with_sigs.clear();
        self.txn_list_with_proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetChunkResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetChunkResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StateSynchronizerMsg {
    // message oneof groups
    pub message: ::std::option::Option<StateSynchronizerMsg_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StateSynchronizerMsg {
    fn default() -> &'a StateSynchronizerMsg {
        <StateSynchronizerMsg as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StateSynchronizerMsg_oneof_message {
    chunk_request(GetChunkRequest),
    chunk_response(GetChunkResponse),
}

impl StateSynchronizerMsg {
    pub fn new() -> StateSynchronizerMsg {
        ::std::default::Default::default()
    }

    // .network.GetChunkRequest chunk_request = 1;


    pub fn get_chunk_request(&self) -> &GetChunkRequest {
        match self.message {
            ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(ref v)) => v,
            _ => GetChunkRequest::default_instance(),
        }
    }
    pub fn clear_chunk_request(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_chunk_request(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chunk_request(&mut self, v: GetChunkRequest) {
        self.message = ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_request(&mut self) -> &mut GetChunkRequest {
        if let ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(GetChunkRequest::new()));
        }
        match self.message {
            ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chunk_request(&mut self) -> GetChunkRequest {
        if self.has_chunk_request() {
            match self.message.take() {
                ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(v)) => v,
                _ => panic!(),
            }
        } else {
            GetChunkRequest::new()
        }
    }

    // .network.GetChunkResponse chunk_response = 2;


    pub fn get_chunk_response(&self) -> &GetChunkResponse {
        match self.message {
            ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(ref v)) => v,
            _ => GetChunkResponse::default_instance(),
        }
    }
    pub fn clear_chunk_response(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_chunk_response(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_chunk_response(&mut self, v: GetChunkResponse) {
        self.message = ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_chunk_response(&mut self) -> &mut GetChunkResponse {
        if let ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(GetChunkResponse::new()));
        }
        match self.message {
            ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_chunk_response(&mut self) -> GetChunkResponse {
        if self.has_chunk_response() {
            match self.message.take() {
                ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(v)) => v,
                _ => panic!(),
            }
        } else {
            GetChunkResponse::new()
        }
    }
}

impl ::protobuf::Message for StateSynchronizerMsg {
    fn is_initialized(&self) -> bool {
        if let Some(StateSynchronizerMsg_oneof_message::chunk_request(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StateSynchronizerMsg_oneof_message::chunk_response(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_request(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(StateSynchronizerMsg_oneof_message::chunk_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &StateSynchronizerMsg_oneof_message::chunk_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StateSynchronizerMsg_oneof_message::chunk_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &StateSynchronizerMsg_oneof_message::chunk_request(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StateSynchronizerMsg_oneof_message::chunk_response(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StateSynchronizerMsg {
        StateSynchronizerMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetChunkRequest>(
                    "chunk_request",
                    StateSynchronizerMsg::has_chunk_request,
                    StateSynchronizerMsg::get_chunk_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GetChunkResponse>(
                    "chunk_response",
                    StateSynchronizerMsg::has_chunk_response,
                    StateSynchronizerMsg::get_chunk_response,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StateSynchronizerMsg>(
                    "StateSynchronizerMsg",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StateSynchronizerMsg {
        static mut instance: ::protobuf::lazy::Lazy<StateSynchronizerMsg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StateSynchronizerMsg,
        };
        unsafe {
            instance.get(StateSynchronizerMsg::new)
        }
    }
}

impl ::protobuf::Clear for StateSynchronizerMsg {
    fn clear(&mut self) {
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StateSynchronizerMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateSynchronizerMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18state_synchronizer.proto\x12\x07network\x1a\x11ledger_info.proto\
    \x1a\x11transaction.proto\"\xba\x01\n\x0fGetChunkRequest\x12#\n\rknown_v\
    ersion\x18\x01\x20\x01(\x04R\x0cknownVersion\x12\x14\n\x05limit\x18\x02\
    \x20\x01(\x04R\x05limit\x12\x18\n\x07timeout\x18\x03\x20\x01(\x04R\x07ti\
    meout\x12R\n\x15ledger_info_with_sigs\x18\x04\x20\x01(\x0b2\x1f.types.Le\
    dgerInfoWithSignaturesR\x12ledgerInfoWithSigs\"\xb6\x01\n\x10GetChunkRes\
    ponse\x12R\n\x15ledger_info_with_sigs\x18\x01\x20\x01(\x0b2\x1f.types.Le\
    dgerInfoWithSignaturesR\x12ledgerInfoWithSigs\x12N\n\x13txn_list_with_pr\
    oof\x18\x02\x20\x01(\x0b2\x1f.types.TransactionListWithProofR\x10txnList\
    WithProof\"\xa6\x01\n\x14StateSynchronizerMsg\x12?\n\rchunk_request\x18\
    \x01\x20\x01(\x0b2\x18.network.GetChunkRequestH\0R\x0cchunkRequest\x12B\
    \n\x0echunk_response\x18\x02\x20\x01(\x0b2\x19.network.GetChunkResponseH\
    \0R\rchunkResponseB\t\n\x07messageb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
